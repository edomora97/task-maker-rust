(function() {var type_impls = {
"task_maker_format":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Frame%3C'a,+B%3E\" class=\"impl\"><a href=\"#impl-Frame%3C'a,+B%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, B&gt; Frame&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n    B: Backend,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">size</a>(&amp;self) -&gt; Rect</h4></section></summary><div class=\"docblock\"><p>Terminal size, guaranteed not to change when rendering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.render_widget\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">render_widget</a>&lt;W&gt;(&amp;mut self, widget: W, area: Rect)<span class=\"where fmt-newline\">where\n    W: Widget,</span></h4></section></summary><div class=\"docblock\"><p>Render a [<code>Widget</code>] to the current buffer using [<code>Widget::render</code>].</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>block = Block::default();\n<span class=\"kw\">let </span>area = Rect::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>frame = terminal.get_frame();\nframe.render_widget(block, area);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.render_stateful_widget\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">render_stateful_widget</a>&lt;W&gt;(\n    &amp;mut self,\n    widget: W,\n    area: Rect,\n    state: &amp;mut &lt;W as StatefulWidget&gt;::State\n)<span class=\"where fmt-newline\">where\n    W: StatefulWidget,</span></h4></section></summary><div class=\"docblock\"><p>Render a [<code>StatefulWidget</code>] to the current buffer using [<code>StatefulWidget::render</code>].</p>\n<p>The last argument should be an instance of the [<code>StatefulWidget::State</code>] associated to the\ngiven [<code>StatefulWidget</code>].</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = ListState::default();\nstate.select(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[\n    ListItem::new(<span class=\"string\">&quot;Item 1&quot;</span>),\n    ListItem::new(<span class=\"string\">&quot;Item 2&quot;</span>),\n];\n<span class=\"kw\">let </span>list = List::new(items);\n<span class=\"kw\">let </span>area = Rect::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>frame = terminal.get_frame();\nframe.render_stateful_widget(list, area, <span class=\"kw-2\">&amp;mut </span>state);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_cursor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_cursor</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>After drawing this frame, make the cursor visible and put it at the specified (x, y)\ncoordinates. If this method is not called, the cursor will be hidden.</p>\n<p>Note that this will interfere with calls to <code>Terminal::hide_cursor()</code>,\n<code>Terminal::show_cursor()</code>, and <code>Terminal::set_cursor()</code>. Pick one of the APIs and stick\nwith it.</p>\n</div></details></div></details>",0,"task_maker_format::ui::curses::FrameType"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()